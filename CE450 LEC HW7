#1


def tree(root, branches=[]):
    for branch in branches:
        assert is_tree (branch), 'branches must be trees'
    return [root] + list(branches)
    
def root(tree):
    return tree[0]
    
def branches (tree):
    return tree[1:]
    
def is_tree (tree):
    if type(tree) != list or len (tree) < 1:
        return False
    for branch in branches(tree):
        if not is_tree (branch):
            return False
    return True
    
def has_itm(t, e): 
    if root(t)==None:
        return False
    if root(t)==e:
        return True
    for i in branches(t):
        if has_itm(i,e):
            return True
    return False        
    
t=tree(1, [ tree(3, [tree(4), tree(5), tree(6)]), tree(2) ] )  
print(has_itm (t,2))    
    
    
    
---------------------------------------------------------------------------------------------------------------------------



#2

def no_of_nodes(t):
    s=0
    if root(t)==None:
        return s
    s+=1
    for i in branches(t):
        s+=no_of_nodes(i)
    return s
    
def get_sum(t): 
    s=0
    if root(t)==None:
        return s
    s+=root(t)
    for i in branches(t):
        s+=get_sum(i)
    return s

def ave_itm(t):
    if root(t)==None:
        return 0
    total=get_sum(t)
    no=no_of_nodes(t)
    return total/no
    
t=tree(1, [ tree(3, [tree(4), tree(5), tree(6)]), tree(2) ] )  
print(get_sum(t)) 
print(no_of_nodes(t))
print(ave_itm(t))    



---------------------------------------------------------------------------------------------------------------------------


#3


import math
 
class FibonacciTree:
    def __init__(self, key):
        self.key = key
        self.children = []
        self.order = 0
 
    def add_at_end(self, t):
        self.children.append(t)
        self.order = self.order + 1
 
 
class FibonacciHeap:
    def __init__(self):
        self.trees = []
        self.least = None
        self.count = 0
 
    def insert(self, key):
        new_tree = FibonacciTree(key)
        self.trees.append(new_tree)
        if (self.least is None or key < self.least.key):
            self.least = new_tree
        self.count = self.count + 1
 
    def get_min(self):
        if self.least is None:
            return None
        return self.least.key
 
    def extract_min(self):
        smallest = self.least
        if smallest is not None:
            for child in smallest.children:
                self.trees.append(child)
            self.trees.remove(smallest)
            if self.trees == []:
                self.least = None
            else:
                self.least = self.trees[0]
                self.consolidate()
            self.count = self.count - 1
            return smallest.key
 
    def consolidate(self):
        aux = (floor_log2(self.count) + 1)*[None]
 
        while self.trees != []:
            x = self.trees[0]
            order = x.order
            self.trees.remove(x)
            while aux[order] is not None:
                y = aux[order]
                if x.key > y.key:
                    x, y = y, x
                x.add_at_end(y)
                aux[order] = None
                order = order + 1
            aux[order] = x
 
        self.least = None
        for k in aux:
            if k is not None:
                self.trees.append(k)
                if (self.least is None
                    or k.key < self.least.key):
                    self.least = k
 
 
def floor_log2(x):
    return math.frexp(x)[1] - 1
 
 
fheap = FibonacciHeap()
 
print('Menu')
print('insert <data>')
print('min get')
print('min extract')
print('quit')
 
while True:
    do = input('What would you like to do? ').split()
 
    operation = do[0].strip().lower()
    if operation == 'insert':
        data = int(do[1])
        fheap.insert(data)
    elif operation == 'min':
        suboperation = do[1].strip().lower()
        if suboperation == 'get':
            print('Minimum value: {}'.format(fheap.get_min()))
        elif suboperation == 'extract':
            print('Minimum value removed: {}'.format(fheap.extract_min()))
 
    elif operation == 'quit':
        break

---------------------------------------------------------------------------------------------------------------------------

#4

def app_func_leaves(t, g):
    if branches(t) == []:
        print(g(root(t)), end=' ')
    else:
        for b in branches(t):
            app_func_leaves(b, g)



---------------------------------------------------------------------------------------------------------------------------

#5


def tree(root, branches=[]):
    for branch in branches:
        assert is_tree(branch), 'branches must be trees'
        return [root] + list(branches)

def root(tree):
    return tree[0]

def branches(tree):
    return tree[1:]

def is_tree(tree):
    if type(tree) != list or len(tree) < 1:
        return False
        for branch in branches(tree):
            if not is_tree(branch):
                return False
        return True

def is_leaves(tree):
    return not branches(tree)

def print_tree(t, indent=0):

    print(' ' * indent + str(root(t)))
    for b in branches(t):
        print_tree(b, indent + 1)

def copy_tree(t):

    return tree(root(t), [copy_tree(b) for b in branches(t)])

def rpl_leaves(t, old, new):

    if is_leaves(t):
        if root(t) == old:
            return tree(new)
        else:
            return t
    else:
        st = [rpl_leaves(b, old, new) for b in branches(t)]
        return tree(root(t), st)

def swap(a, b):

    a[:], b[:] = b[:], a[:]





---------------------------------------------------------------------------------------------------------------------------

#6


def height(tree):
   if branches(tree) == []:
       return 0
   else:
       bheights = [height(b) for b in branches(tree)] #get height of all branches
       return 1 + max(bheights)
       
       
       
       
       
---------------------------------------------------------------------------------------------------------------------------


#7


def largest_itm(t): 
    if root(t)==None:
        return 0
    largest=root(t)
    for i in branches(t):
        if largest_itm(i)>largest:
            largest=largest_itm(i)
    return largest        
    
t=tree(1, [ tree(3, [tree(90), tree(5), tree(6)]), tree(2) ] )  
print(largest_itm(t)) 




---------------------------------------------------------------------------------------------------------------------------


#8

def num_nodes(t):
    s=0
    if root(t)==None:
        return s
    s+=1
    for i in branches(t):
        s+=num_nodes(i)
    return s
    
t = tree('reptiles',[tree('python',[tree('anaconda')]),tree('snake',[tree('cobra'),tree('viper')]),tree('chameleon')]) 

print(num_nodes(t))

